#= depend_on_asset "search.html"
#= depend_on_asset "movie.html"
user_signed_in = window.user_signed_in
window.movieSearch = angular.module('movieSearch', ['ngRoute', 'movieSearch.controllers'])

.constant("MOVIE_API", "http://www.omdbapi.com/?")
.run( ($rootScope)->
  $rootScope.user_signed_in = user_signed_in
)
#bonus extract api calls to a service
.config(['$routeProvider', ($routeProvider)->
  $routeProvider
    .when('/favorites', {
      templateUrl: '<%= asset_path("favorites_index.html") %>',
      controller: 'FavoritesIndexCtrl',
      resolve: {
        favorites: ['$route', '$q', '$http', ($route, $q, $http)->
          deferred = $q.defer();
          $http.get('/favorites.json').success( (data) ->
            #Title, Type, Year, imdbID
            deferred.resolve(data)
            console.log('Successfully loaded favorites.')
          ).error( ->
            deferred.reject()
            console.error('Failed to load favorites.')
            #bonus show in UI
          )

          return deferred.promise
        ]
      }
    })
    .when('/search/movies/:query', {
      templateUrl: '<%= asset_path("search.html") %>',
      controller: 'SearchCtrl',
      resolve: {
        query: ['$route', ($route)->
          return $route.current.params.query
        ],
        movies: ['$route', '$q', 'MOVIE_API', '$http', ($route, $q, MOVIE_API, $http)->
          deferred = $q.defer();
          $http.get(MOVIE_API+"s="+$route.current.params.query).success( (data) ->
            #Title, Type, Year, imdbID
            deferred.resolve(data.Search)
            console.log('Successfully loaded movies.')
          ).error( ->
            deferred.reject()
            console.error('Failed to load movies.')
            #bonus show in UI
          )

          return deferred.promise
        ],
        favorites: ['$route', '$q', '$http', ($route, $q, $http)->
          deferred = $q.defer();
          if(user_signed_in)
            $http.get('/favorites.json').success( (data) ->
              #Title, Type, Year, imdbID
              deferred.resolve(data)
              console.log('Successfully loaded favorites.')
            ).error( ->
              deferred.reject()
              console.error('Failed to load favorites.')
              #bonus show in UI
            )
          else
            deferred.reject()

          return deferred.promise
        ]
      }
    })
    .when('/movies/:id', {
      templateUrl: '<%= asset_path("movie.html") %>'
      controller: 'MovieShowCtrl',
      resolve: {
        movie: ['$route', '$q', 'MOVIE_API', '$http', ($route, $q, MOVIE_API, $http)->
          deferred = $q.defer();
          $http.get(MOVIE_API+"i="+$route.current.params.id).success( (data) ->
            deferred.resolve(data)
            console.log('Successfully loaded movie.')
          ).error( ->
            deferred.reject()
            console.error('Failed to load movie.')
            #bonus show in UI
          )
          
          return deferred.promise
        ]
      }
    })
    .otherwise({
      templateUrl: '<%= asset_path("search.html") %>',
      controller: 'SearchCtrl'
      resolve: {
        query: ()->
          return undefined
        movies: ()->
          return []
        favorites: ()->
          return []
      }
    })
])